{"version":3,"sources":["wario.js","src/patterns.js","src/wario.js"],"names":[],"mappings":"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","file":"wario.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  global.wario = factory()\n}(this, function () { 'use strict';\n\n  const rps = {\n    core: {\n      replace: /(\\r\\n|\\n|\\r)/gm\n    },\n    each: {\n      matchChunk: /(({{#each(.*?)}})(.*?){{\\/each}})/g,\n      matchAttribute: /{{#each (.*?)}}/,\n      replace: /({{#each (.+?)}})|{{\\/each}}/g\n    },\n    rpv: {\n      match: /{{([^}]*)}}/g,\n      replace: /({{|}})/g\n    }\n  };\n\n  function getNested(obj, key) {\n    const parts = key.split('.');\n    const realKey = parts[0];\n    const attribute = obj[realKey];\n    if (parts.length > 1) {\n      return getNested(attribute, parts.slice(1).join('.'));\n    } else {\n      return attribute;\n    }\n  }\n\n  function parseEach(string, obj) {\n    const pattern = rps.each.matchChunk;\n    const parsed = string.match(pattern).reduce((result, m) => {\n      let key = m.match(rps.each.matchAttribute)[1];\n      let matchVal = getNested(obj, key);\n      let newText = matchVal.map((value) => {\n        return replaceValues(m.replace(rps.each.replace, ''), value);\n      });\n\n      return result.replace(m, newText.join(''));\n    }, string);\n\n    return parsed;\n  }\n\n  function replaceValues(string, obj) {\n    const matches = string.match(rps.rpv.match);\n    if (!matches) { return string; }\n    const parsed = matches.reduce((result, m) => {\n      let key = m.replace(rps.rpv.replace, '');\n      let matchVal = getNested(obj, key);\n      return result.replace(m, matchVal);\n    }, string);\n\n    return parsed;\n  }\n\n  function parseTemplate(template, obj) {\n    const source = template.replace(rps.core.replace,'').trim();\n    if (template.indexOf('{{#each') > -1) {\n      return replaceValues(parseEach(source, obj), obj);\n    }\n    return replaceValues(source, obj);\n  }\n\n  var wario = parseTemplate;\n\n  return wario;\n\n}));\n","const rps = {\n  core: {\n    replace: /(\\r\\n|\\n|\\r)/gm\n  },\n  each: {\n    matchChunk: /(({{#each(.*?)}})(.*?){{\\/each}})/g,\n    matchAttribute: /{{#each (.*?)}}/,\n    replace: /({{#each (.+?)}})|{{\\/each}}/g\n  },\n  rpv: {\n    match: /{{([^}]*)}}/g,\n    replace: /({{|}})/g\n  }\n};\n\nexport default rps;\n","import rps from './patterns';\n\nfunction getNested(obj, key) {\n  const parts = key.split('.');\n  const realKey = parts[0];\n  const attribute = obj[realKey];\n  if (parts.length > 1) {\n    return getNested(attribute, parts.slice(1).join('.'));\n  } else {\n    return attribute;\n  }\n}\n\nfunction parseEach(string, obj) {\n  const pattern = rps.each.matchChunk;\n  const parsed = string.match(pattern).reduce((result, m) => {\n    let key = m.match(rps.each.matchAttribute)[1];\n    let matchVal = getNested(obj, key);\n    let newText = matchVal.map((value) => {\n      return replaceValues(m.replace(rps.each.replace, ''), value);\n    });\n\n    return result.replace(m, newText.join(''));\n  }, string);\n\n  return parsed;\n}\n\nfunction replaceValues(string, obj) {\n  const matches = string.match(rps.rpv.match);\n  if (!matches) { return string; }\n  const parsed = matches.reduce((result, m) => {\n    let key = m.replace(rps.rpv.replace, '');\n    let matchVal = getNested(obj, key);\n    return result.replace(m, matchVal);\n  }, string);\n\n  return parsed;\n}\n\nfunction parseTemplate(template, obj) {\n  const source = template.replace(rps.core.replace,'').trim();\n  if (template.indexOf('{{#each') > -1) {\n    return replaceValues(parseEach(source, obj), obj);\n  }\n  return replaceValues(source, obj);\n}\n\nexport default parseTemplate;\n"],"sourceRoot":"/source/"}